#!/usr/bin/perl

# Use external modules
use strict;
use Config;
use threads;
use threads::shared;
use Thread::Queue;
use IO::Socket;
use Data::Dumper;
use POSIX;
use Proc::Daemon;
use Time::HiRes;

# Check perl for threads support
$Config{useithreads} or die "Recompile Perl with threads to run this program.";

# Include parts of system
require '/opt/mmm/lib/config.pm';
require '/opt/mmm/lib/log.pm';
require '/opt/mmm/lib/control.pm';
require '/opt/mmm/lib/commands.pm';

#-----------------------------------------------------------------
my $postfix = "";
if (scalar(@ARGV) && $ARGV[0] =~ /^@(.*)/) {
    shift(@ARGV);
    $postfix = "_$1";
}

my $cfg_file = "/opt/mmm/mmm_mon$postfix.conf";
unless (-f $cfg_file) {
    print "Error: Can't find monitoring system config ($cfg_file)!\n\tLooks like you are trying to start mmm_control on wrong server or specified wrong cluster name!\n\n";
    exit(1);
}

# Read config file
print "Config file: $cfg_file\n";
our $config = ReadConfig($cfg_file);

# Create commands map
our $commands_map = {};
$commands_map->{ping} = \&PingCommand;
$commands_map->{show} = \&ShowCommand;
$commands_map->{set_online} = \&SetOnlineCommand;
$commands_map->{set_offline} = \&SetOfflineCommand;
$commands_map->{move_role} = \&MoveRoleCommand;

# Check params
if (scalar(@ARGV) < 1) {
    PrintUsage();
    exit(1);
}

my $command = lc($ARGV[0]);
chomp($command);

unless ($commands_map->{$command}) {
    print "Error: Invalid command name: $command!\n";
    PrintUsage();
    exit(1);
}

$commands_map->{$command}();

exit(0);

#-----------------------------------------------------------------
sub PrintUsage() {
    my @command_names = keys(%$commands_map);
    print "Usage: $0 <" . join('|', @command_names) . "> [..params..]\n\n";
}
